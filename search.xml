<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Kotlin学习笔记]]></title>
      <url>http://yoursite.com/2017/06/22/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><a id="more"></a>
<p>这只是自己的一些笔记,难免有不足之处,如有发现敬请指正!</p>
<p>学习Kotlin,首选<a href="https://www.kotlincn.net/" target="_blank" rel="external">Kotlin官网</a></p>
<p><img src="http://on3sv9pyx.bkt.clouddn.com/憨豆先生开车啦.gif" alt="开车啦"></p>
<h3 id="关于Kotlin"><a href="#关于Kotlin" class="headerlink" title="关于Kotlin"></a>关于Kotlin</h3><ul>
<li>Kotlin 是一个基于 JVM 的编程语言,由 JetBrains 开发.</li>
<li>Kotlin 可以变异成Java字节码,也可以变异成JavaScript,方便在没有 JVM 的设备上运行.</li>
<li>JetBrains 作为广受欢迎的Java IDE IntelliJ 的提供商,在 Apache 许可下已经开源其 Kotlin 编程语言.<h3 id="Kotlin语言特点"><a href="#Kotlin语言特点" class="headerlink" title="Kotlin语言特点"></a>Kotlin语言特点</h3></li>
<li>空类型安全</li>
<li>Lambda表达式</li>
<li>扩展方法</li>
<li>类型推导</li>
<li>胜任Java能做的任何事,还要更简单</li>
<li>没有分号!!!</li>
</ul>
<h3 id="Kotlin一些基本语法"><a href="#Kotlin一些基本语法" class="headerlink" title="Kotlin一些基本语法"></a>Kotlin一些基本语法</h3><ol>
<li>Kotlin里面定义<strong>常量</strong> val a =  10      (注意:常量不能被重新赋值)</li>
<li>Kotlin里面定义<strong>变量</strong> var b = 10   b = 11    (这样是可以的)</li>
<li><strong>打印输出</strong> Log.i(“tag”,”a = $a”)     <em>$被称为字符串模板,用来获取 变量或常量的值</em></li>
</ol>
<h3 id="Kotlin-基本数据类型"><a href="#Kotlin-基本数据类型" class="headerlink" title="Kotlin 基本数据类型"></a>Kotlin 基本数据类型</h3><p>Kotlin里面的数据类型参考Java的数据类型 Byte Short Int Long Float Double Boolean<br>定义不同数据类型的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var byte:Byte = 1.toByte()</div><div class="line"></div><div class="line">var s:Short = 1</div><div class="line"></div><div class="line">var i:Int = 1</div><div class="line"></div><div class="line">var l:Long = 1</div><div class="line"></div><div class="line">var f:Float = 1.0f</div><div class="line"></div><div class="line">var d:Double = 10.8</div><div class="line"></div><div class="line">var b:Boolean = false</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong></p>
<blockquote>
<p>Kotlin是<strong>强类型</strong>语言所以定义变量的时候后面的数据类型可以<strong>省略不写</strong>,编译的时候会自己根据后面的值补上数据类型!!!</p>
</blockquote>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 定义数组的3种方式</div><div class="line">// 方式1 先定义数组</div><div class="line">var arr1 = arrayOfNulls&lt;Int&gt;(3)</div><div class="line"></div><div class="line">// 方式2 先指定数据类型再赋值</div><div class="line">var arr2 = IntArray(3)</div><div class="line">arr2[0] = 1</div><div class="line">arr2[1] = 2</div><div class="line">arr2[2] = 3</div><div class="line"></div><div class="line">// 方式3 定义数组直接赋值</div><div class="line">var arr3 = arrayOf(7, 8, 9)</div><div class="line"></div><div class="line">// 获取数组的大小</div><div class="line">var size = arr3.size</div><div class="line">Log.i(&quot;tag&quot;,&quot;size = $size&quot;)</div><div class="line"></div><div class="line">// 获取指定位置的元素</div><div class="line">var a = arr2[2]</div><div class="line">Log.i(&quot;tag&quot;,&quot;arr2[2] = $a&quot;)</div><div class="line"></div><div class="line">var b = arr3.get(2)</div><div class="line">Log.i(&quot;tag&quot;,&quot;arr3[2] = $b&quot;)</div></pre></td></tr></table></figure>
<h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var a:Int = 10</div><div class="line">if (a in 10..20) &#123; // in 表示在多少到多少的范围之内</div><div class="line">    Log.i(&quot;tag&quot;,&quot;a在10~20的范围之内&quot;)</div><div class="line">&#125; else &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;a不在10~20的范围之内&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var b:Int= 21</div><div class="line">if (b !in 10..20) &#123; // !in 表示不在多少到多少的范围之内 注意 -- !的位置在in的前面</div><div class="line">    Log.i(&quot;tag&quot;,&quot;b不在10~20的范围内&quot;)</div><div class="line">&#125; else &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;b在10~20的范围内&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c:Int = 12</div><div class="line">if (c is Int) &#123; // is 表示是否为这个数据类型</div><div class="line">    Log.i(&quot;tag&quot;,&quot;c是Int类型&quot;)</div><div class="line">&#125; else &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;c不是Int类型&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="When语句-类似Java里面的-switch-case-语句"><a href="#When语句-类似Java里面的-switch-case-语句" class="headerlink" title="When语句 (类似Java里面的 switch-case 语句)"></a>When语句 (类似Java里面的 switch-case 语句)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// when语句</div><div class="line">var a:Int = 10</div><div class="line">when(a) &#123; // 单独分支语句</div><div class="line">    10 -&gt; Log.i(&quot;tag&quot;,&quot;a的值为10&quot;)</div><div class="line">    20 -&gt; Log.i(&quot;tag&quot;,&quot;a的值为20&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var b:Int = 10</div><div class="line">when(b)&#123; // 连在一起的分支结构</div><div class="line">    10,20 -&gt; Log.i(&quot;tag&quot;,&quot;b的值是10或者20&quot;)</div><div class="line">    else -&gt;&#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;b的值不是10或者20&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var c:Int = 10</div><div class="line">when(c) &#123; // 范围的分支语句</div><div class="line">    in 10..20 -&gt; Log.i(&quot;tag&quot;,&quot;c的范围在10到20之间&quot;)</div><div class="line">    !in 20..30 -&gt; Log.i(&quot;tag&quot;,&quot;c的范围不在20到30之间&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var d:Int = 10</div><div class="line">when(d) &#123; // 类型的分支语句</div><div class="line">    is Int -&gt; Log.i(&quot;tag&quot;,&quot;d的类型是Int&quot;)</div><div class="line">    else -&gt; &#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;d的类型不是Int类型&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// while循环</div><div class="line">var i = 0</div><div class="line">var sum = 0</div><div class="line">while (i &lt;=100) &#123;</div><div class="line">    sum += i++</div><div class="line">&#125;</div><div class="line">Log.i(&quot;tag&quot;,&quot;sum = $sum&quot;)</div></pre></td></tr></table></figure>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// do-while循环</div><div class="line">var i = 0</div><div class="line">var sum = 0</div><div class="line">do &#123;</div><div class="line">    sum += i++</div><div class="line">&#125; while (i in 0..100)</div><div class="line">Log.i(&quot;tag&quot;,&quot;sum = $sum&quot;)</div></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// for 循环</div><div class="line">var arr = arrayOf(9, 3, 10)</div><div class="line">for (item in arr) &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// for 循环+downTo关键字</div><div class="line">for (i in 10 downTo 2) &#123; // 倒序</div><div class="line">    Log.i(&quot;tag&quot;,&quot;i = $i&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// for循环+downTo关键字+step关键字</div><div class="line">for (x in 10 downTo 2 step 2) &#123; // step 每次几步</div><div class="line">    Log.i(&quot;tag&quot;,&quot;x = $x&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="break-amp-amp-continue"><a href="#break-amp-amp-continue" class="headerlink" title="break&amp;&amp;continue"></a>break&amp;&amp;continue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = arrayOf(1, 2, 3)</div><div class="line">for (item in arr) &#123;</div><div class="line">    if (item == 2) &#123;</div><div class="line">        break // 终止循环结构</div><div class="line">    &#125;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = arrayOf(1, 2, 3)</div><div class="line">for (item in arr) &#123;</div><div class="line">    if (item == 2) &#123;</div><div class="line">        continue // 终止此次循环,继续下次循环</div><div class="line">    &#125;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 字符串</div><div class="line">var str = &quot;拔个智齿真麻烦,吃饭睡觉都挺烦&quot;</div><div class="line">var length = str.length</div><div class="line">Log.i(&quot;tag&quot;,&quot;leng = $length&quot;)</div><div class="line">var i = str.get(5)</div><div class="line">Log.i(&quot;tag&quot;,&quot;$i&quot;)</div><div class="line"></div><div class="line">var str2 = &quot;拔个智齿真麻烦,吃饭睡觉都挺烦&quot;</div><div class="line">// Kotlin里面的== 和equals()是等价的</div><div class="line">var b = str == str2</div><div class="line">var b1 = str.equals(str2)</div><div class="line">Log.i(&quot;tag&quot;,&quot;b = $b,b1 = $b1&quot;)</div><div class="line"></div><div class="line">var substring = str.substring(9, 12) // 截取字符串</div><div class="line">Log.i(&quot;tag&quot;,&quot;$substring&quot;)</div></pre></td></tr></table></figure>
<h3 id="List集合-集合分为两类-1-长度不可变的集合-2-长度可变的集合"><a href="#List集合-集合分为两类-1-长度不可变的集合-2-长度可变的集合" class="headerlink" title="List集合 (集合分为两类:1.长度不可变的集合 2.长度可变的集合)"></a>List集合 (集合分为两类:1.长度不可变的集合 2.长度可变的集合)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// List集合</div><div class="line">// listOf 长度不可变的集合</div><div class="line">var list = listOf&lt;Int&gt;(4, 5, 6)</div><div class="line">var size = list.size</div><div class="line">Log.i(&quot;tag&quot;, &quot;size = $size&quot;)</div><div class="line">for (item in list) &#123;</div><div class="line">    Log.i(&quot;tag&quot;, &quot;item = $item&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mutableListOf 长度可变的集合</div><div class="line">var mutableListOf = mutableListOf&lt;String&gt;()</div><div class="line">mutableListOf.add(&quot;小勇哥&quot;)</div><div class="line">mutableListOf.add(&quot;俺家老大&quot;)</div><div class="line">if (mutableListOf.contains(&quot;俺家老大&quot;)) &#123; // contains包含</div><div class="line">    Log.i(&quot;tag&quot;, &quot;小勇哥和老大一起&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (item in mutableListOf) &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">mutableListOf.reverse() // 集合里面的元素反转</div><div class="line"></div><div class="line"></div><div class="line">for (item in mutableListOf) &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">mutableListOf.removeAt(0) // 移除数组下标为0的元素</div><div class="line"></div><div class="line">for (item in mutableListOf) &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// set集合 类似List集合,不同的是添加相同的元素会进行覆盖 其余的方法和List类似</div><div class="line">var set = mutableSetOf&lt;Int&gt;()</div><div class="line">set.add(1)</div><div class="line">set.add(1)</div><div class="line">set.add(2)</div><div class="line">var size = set.size</div><div class="line">Log.i(&quot;tag&quot;,&quot;size = $size&quot;)</div><div class="line"></div><div class="line">for (item in set) &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;item = $item&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// Map集合 类似List集合 分为两个集合 基本方法也类似</div><div class="line">var map = mutableMapOf&lt;String, Int&gt;()</div><div class="line">map.put(&quot;Kobe&quot;,38)</div><div class="line">map.put(&quot;allen&quot;,37)</div><div class="line">// 迭代</div><div class="line">for (key in map.keys)&#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;key = $key,value = $&#123;map.get(key)&#125;&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  // Kotlin里面的函数 关键字fun</div><div class="line">        a()</div><div class="line">        Log.i(&quot;tag&quot;,&quot;$&#123;b(3,6)&#125;&quot;)</div><div class="line">        // c()里面的一个参数有默认值,所以调用方法的时候可以不指定</div><div class="line">        c(18)</div><div class="line">        c(25,&quot;小勇哥&quot;)</div><div class="line">        Log.i(&quot;tag&quot;,&quot;$&#123;d(&quot;我就看看你的长度&quot;)&#125;&quot;)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    // 函数a() 没有返回值类型的就是返回Unit类型(可以省略Unit类型)</div><div class="line">    fun a():Unit &#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;没有返回值类型==Unit类型&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // 函数b() 输入两个Int类型的对象,返回值类型也是Int</div><div class="line">    fun b(x:Int,y:Int):Int&#123;</div><div class="line">        return x + y</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 函数c() 要是方法有默认参数,调用方法的时候有默认参数的可以不传入参数</div><div class="line">    fun c(age : Int,name : String = &quot;我是你爸爸&quot;)&#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;age = $age,name = $name&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 函数d() Kotlin里面具有强制空类型判断</div><div class="line">    fun d(str : String ?) : Int&#123; // str参数允许为空</div><div class="line">//        return str.length // 因为上面参数允许为空,所以没有判断是否为空就返回是报错的</div><div class="line">        if (str != null) &#123;</div><div class="line">            return str.length</div><div class="line">        &#125;</div><div class="line">        return 0</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="可变参数–vararg"><a href="#可变参数–vararg" class="headerlink" title="可变参数–vararg"></a>可变参数–vararg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 调用可变参数的函数</div><div class="line">e(1)</div><div class="line">e(3,4)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//可变参数 关键字:vararg</div><div class="line">fun e(vararg items : Int) &#123; // 没有返回值</div><div class="line">    for (item in items) &#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;$item&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// Kotlin 里面的异常处理</div><div class="line">try &#123;</div><div class="line">    var result = devide(18, 3)</div><div class="line">    Log.i(&quot;tag&quot;,&quot;result = $result&quot;)</div><div class="line">&#125; catch(e: Exception)</div><div class="line">&#123;</div><div class="line">    Log.i(&quot;tag&quot;,e.message)</div><div class="line">&#125; finally &#123;</div><div class="line">    Log.i(&quot;tag&quot;,&quot;爱咋咋老子就是要执行&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun devide(x : Int ,y : Int) : Int&#123;</div><div class="line">    if (y == 0) &#123;</div><div class="line">        throw IllegalArgumentException(&quot;除数不能为零&quot;)</div><div class="line">    &#125;</div><div class="line">    return  x/y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><center>面向对象</center></h2><p><img src="http://on3sv9pyx.bkt.clouddn.com/面向对象.gif" alt="面向对象"></p>
<h3 id="类-amp-amp-对象"><a href="#类-amp-amp-对象" class="headerlink" title="类&amp;&amp;对象"></a>类&amp;&amp;对象</h3><p>Kotlin里面的面向对象思想参考Java,创建对象的不同就是<strong>没有new关键字</strong></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class User &#123;</div><div class="line">    var name : String</div><div class="line">    lateinit var desprition: String // 延迟初始化必须是对象类型 不能是基本数据类型</div><div class="line"></div><div class="line">    init &#123; // 初始化属性值</div><div class="line">        name = &quot;小勇哥&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>一级构造函数&amp;二级构造函数<br>注意:二级构造函数里面<strong>不能再声明属性</strong></p>
<h3 id="set-amp-amp-get-amp-amp-普通函数"><a href="#set-amp-amp-get-amp-amp-普通函数" class="headerlink" title="set() &amp;&amp; get() &amp;&amp; 普通函数"></a>set() &amp;&amp; get() &amp;&amp; 普通函数</h3><p>Kotlin里面不推荐使用set()和get()方法,private修饰的属性,外部类访问不到,所以失去了set()和get()的意义,使用自己的函数方法</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Kotlin里面默认是<strong>final</strong>修饰的,不能被继承,当一个类标识为<strong>open</strong>之后这个类才能被继承,使用<strong>:</strong>语法<br>Kotlin和Java一样是 : 单继承多实现<br>继承之后子类拥有父类的属性和函数(不包括private修饰的)<br>子类继承具有一级构造方法的父类时候,子类和父类相同的参数不用使用var声明,子类自己<strong>特有的参数</strong>还需要使用<strong>var</strong>声明</p>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>父类方法默认是被<strong>final</strong>修饰不能被重写的,要被重写的方法需要使用<strong>open</strong>修饰<br>子类里面重写的方法要使用<strong>override</strong>修饰,如果需要使用父类的方法,保留super</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>Kotlin里面的抽象类和Java一致,使用<strong>abstract</strong>修饰</p>
<ol>
<li>抽象类里面可以没有抽象方法</li>
<li>抽象方法必须位于抽象类里面</li>
</ol>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>Kotlin里面的接口类似Java里面的接口<br>Kotlin接口里面的方法可以有方法体(这个和Java不一样)<br>实现接口就要去实现接口里面的<strong>方法</strong>和<strong>属性</strong>(这个和Java里面的也不一样)</p>
<h3 id="嵌套类-amp-amp-内部类"><a href="#嵌套类-amp-amp-内部类" class="headerlink" title="嵌套类&amp;&amp;内部类"></a>嵌套类&amp;&amp;内部类</h3><ol>
<li>嵌套类是通过<strong>路径</strong>来访问的</li>
<li>内部类是使用关键字<strong>inner</strong>来标识的,访问的时候要先得到外部类的实例对象,<strong>可以把内部类当成外部类的成员变量或函数</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Outer &#123;</div><div class="line"></div><div class="line">    // 定义嵌套类</div><div class="line">    class Nested &#123;</div><div class="line">        fun a() &#123;</div><div class="line">            Log.i(&quot;tag&quot;,&quot;======嵌套类&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 定义内部类</div><div class="line">    inner class Innner &#123;</div><div class="line">        fun a() &#123;</div><div class="line">            Log.i(&quot;tag&quot;,&quot;======内部类&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 访问嵌套类</div><div class="line">Outer.Nested().a()</div><div class="line"></div><div class="line">// 访问内部类</div><div class="line">Outer().Innner().a()  // 访问内部类要先得到外部类的实例!!!</div></pre></td></tr></table></figure>
<h3 id="对象表达式-amp-对象声明-类似Java里面的匿名内部类"><a href="#对象表达式-amp-对象声明-类似Java里面的匿名内部类" class="headerlink" title="对象表达式&amp;对象声明(类似Java里面的匿名内部类)"></a>对象表达式&amp;对象声明(类似Java里面的匿名内部类)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">open class Person &#123;</div><div class="line">    open fun println()&#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;这是一个可以被重写的函数!&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyUser &#123;</div><div class="line">    fun user(person: Person) &#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;=========&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 使用匿名内部类</div><div class="line">        var myUser = MyUser()</div><div class="line">        myUser.user(object : Person()&#123; // 使用匿名内部类,和Java不同的是使用关键字 object</div><div class="line">            override fun println() &#123;</div><div class="line">//                super.println()</div><div class="line">            &#125;</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by sgy on 2017/6/20.</div><div class="line"> * data 数据类 </div><div class="line"> * 注意:</div><div class="line"> *      1,声明类的前面要有data修饰符</div><div class="line"> *      2,数据类里面必须有属性值</div><div class="line"> */</div><div class="line">data class Teacher(var name : String,var age :Int) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var teacher1 = Teacher(&quot;Tom&quot;,25)</div><div class="line">var teacher2 = Teacher(&quot;Tom&quot;,25)</div><div class="line"></div><div class="line">Log.i(&quot;tag&quot;,&quot;$&#123;teacher1.equals(teacher2)&#125;&quot;) // 数据类只会比较属性的值---&gt;true</div><div class="line"></div><div class="line">Log.i(&quot;tag&quot;,teacher1.toString())</div><div class="line"></div><div class="line">// 数据复制</div><div class="line">var copy = teacher1.copy(&quot;二狗子&quot;)</div><div class="line">Log.i(&quot;tag&quot;,copy.toString())</div></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">enum class COLOR &#123;</div><div class="line">    RED,GREEN,BLUE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var blue = COLOR.BLUE</div><div class="line"></div><div class="line">var name = blue.name // 枚举的名字</div><div class="line">Log.i(&quot;tag&quot;,&quot;name = $name&quot;)</div><div class="line"></div><div class="line">var ordinal = blue.ordinal // 枚举的序数</div><div class="line">Log.i(&quot;tag&quot;,&quot;ordinal = $ordinal&quot;)</div></pre></td></tr></table></figure>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Created by sgy on 2017/6/20.</div><div class="line">* 单例模式:</div><div class="line">*          1,构造函数私有化</div><div class="line">*          2,使用 companion object</div><div class="line">*/</div><div class="line">class MySqliteOpenHelper private constructor()&#123;</div><div class="line">    companion object &#123;</div><div class="line">        fun getInstance() : MySqliteOpenHelper = MySqliteOpenHelper()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun a()&#123;</div><div class="line">        Log.i(&quot;tag&quot;,&quot;调用单例模式里面的方法&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 单例模式</div><div class="line">MySqliteOpenHelper.getInstance().a()</div></pre></td></tr></table></figure>
<h3 id="Object-工具类"><a href="#Object-工具类" class="headerlink" title="Object 工具类"></a>Object 工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by sgy on 2017/6/20.</div><div class="line"> * objext--工具类 类似Java里面的静态工具类</div><div class="line"> */</div><div class="line">object LogUtils &#123;</div><div class="line"></div><div class="line">    fun i(tag : String,msg : String)&#123;</div><div class="line">        Log.i(tag,msg)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun e(tag : String,msg : String)&#123;</div><div class="line">        Log.e(tag,msg)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 调用object工具类里面的方法可以直接通过类名调用</div><div class="line">LogUtils.i(&quot;tag&quot;,&quot;这是日志工具打印的日志&quot;)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[改变]]></title>
      <url>http://yoursite.com/2017/06/09/%E6%94%B9%E5%8F%98/</url>
      <content type="html"><![CDATA[<h2 id="随便唠叨"><a href="#随便唠叨" class="headerlink" title="随便唠叨"></a>随便唠叨</h2><a id="more"></a>
<p>好久没有写博客了，也好久没有长进了。最近天气变热了，报的驾照还在考试，公司也总是有各种各样的事。总之一切都是自己的借口吧，就是不想去改变，活的很安逸，所以更是不愿意去改变。该有些觉悟了，毕竟还是太年轻，不能作茧自缚呐！</p>
<p>现在的自己也有些越来越浮躁了，没有耐心看会书，甚至有时候连完整的看一篇公众号文章的耐心都没有。年底买的书现在还没有看，借的书也只是看了一点开头，最近看「鬼脚七」的公众号文章，感触挺多的，挑一些说说吧。</p>
<blockquote>
<pre><code>《情绪像一条河》
</code></pre><p> 坏的情绪就像是小溪流，如果不能及时察觉，就会慢慢汇聚，毁掉你的生活。</p>
<p> 合抱之木，生于毫末。九层之台，起于磊土。要及时察觉自己的情绪变化，这样才能及时控制，不至于到最后成了控制不住的河流。</p>
<p>觉察到了坏情绪，能做的就只是保持觉察就好，不需要太纠结，就是静静地看着它发生就好。</p>
</blockquote>
<p>之前也是有怀疑态度，但经过自己的亲身实践，确实有用。强烈推荐试试，不谢！</p>
<blockquote>
<pre><code>《白鹿原》
</code></pre><p>兴，百姓苦；亡，百姓苦。</p>
</blockquote>
<p>我没有看过这部小说，也没有看过电影，感觉一般描述那个年代的故事都是悲情收尾。个人还是比较喜欢有个美好结局的故事吧，很多电影即使是一些情节需要要历经千辛万苦才能在一起的，也总是觉得太揪心，其实自己一眼就能看到结局，男女主角绝不会死，但必须经过各种故事才能圆满。也总感觉太担心，没有心思去看，不想被剧情带的太感伤。但七哥这句话我却记下了，我也不懂政治，不想评论什么，但感觉这话没毛病。</p>
<blockquote>
<pre><code>《回答三个问题，带你摆脱单身》
</code></pre><ol>
<li>你是真的想单身吗？</li>
<li>你真想要找个对象吗？</li>
<li>你有哪些性格缺陷？</li>
</ol>
</blockquote>
<p>其实里面对我自己来说收获最大的是关于怎么忘记之前爱的很深的人。自己确实也是有这方面的问题吧，这个说来话长，算了。无非就是常见的分手啦，忘不掉。七哥说，每当想起对方，只是看着自己想起，不要被念头带走，别进入那些曾经的画面，只需要知道：哦，我又想起他（她）了。时刻知道，时刻觉察就好。要是被念头画面带走了，只要意识到，马上回来，继续觉察。</p>
<p>感觉七哥说的好有道理，可能在修行的人多少都会有一些超然物外的感觉，总能三言两语之间给人指点迷津吧。希望自己能多跟七哥学习一些吧，也希望自己能少些迷惑。</p>
<p>要改变了，太安逸对自己来说总是不太好的。</p>
<p>撸起袖子，就是干。</p>
]]></content>
      
        
        <tags>
            
            <tag> 个人感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小勇哥的博客诞生记]]></title>
      <url>http://yoursite.com/2017/03/19/%E5%B0%8F%E5%8B%87%E5%93%A5%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="记录下自己的博客的搭建过程"><a href="#记录下自己的博客的搭建过程" class="headerlink" title="记录下自己的博客的搭建过程"></a>记录下自己的博客的搭建过程</h2><a id="more"></a>
<h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><p>   之前也没想过要搭建自己的博客,其实也有别的省事的平台:简书,CSDN…我自己也经常从上面找资料,但是吧毕竟是别人的平台,要按照别人的规则来.再加上一直关注张哥(stormzhang)<a href="http://stormzhang.com/" target="_blank" rel="external">张哥的博客</a>,张哥也建议自己搭建自己的博客,(真的很感谢张哥一直在分享自己的东西,虽未谋面但真的学到好多,不仅仅是技术还有生活方面,感谢张哥,感谢!!!)自己也想捣鼓下,希望能坚持写自己的博客,也希望能帮助到需要的人吧!</p>
<h3 id="我的博客是hexo-github"><a href="#我的博客是hexo-github" class="headerlink" title="我的博客是hexo+github"></a>我的博客是hexo+github</h3><p> 其实很多名词概念也不是很明白,就说下自己的过程吧!!!</p>
<h4 id="1-需要安装的软件-Node-js-Git-如果需要科学上网-请学会科学上网吧"><a href="#1-需要安装的软件-Node-js-Git-如果需要科学上网-请学会科学上网吧" class="headerlink" title="1.需要安装的软件:Node.js + Git (如果需要科学上网,请学会科学上网吧!)"></a>1.需要安装的软件:Node.js + Git (如果需要科学上网,请学会科学上网吧!)</h4><blockquote>
<p>(1)安装Node.js—Node.js是为了安装Hexo这个博客的框架 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a></p>
<p>(2)安装Git—Git是非常牛逼的版本控制软件,如果你还不知道版本控制是什么的话,建议上网查下,谁用谁知道.相信我,用到的时候你会感谢自己曾经学习过Git的. <a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a></p>
<p>或许你还不会使用Git,建议看下廖雪峰老师的Git教程,真的写的很好!!! <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰老师Git教程</a> 感谢廖老师,当初自己也是看的廖老师的教程学习的Git!!!</p>
</blockquote>
<h4 id="2-现在就开始安装Hexo"><a href="#2-现在就开始安装Hexo" class="headerlink" title="2.现在就开始安装Hexo"></a>2.现在就开始安装Hexo</h4><blockquote>
<p>1.首先什么是Hexo,个人理解就是一个框架,我们利用它可以更简单的搭建自己的博客!</p>
<p>2.刚才说过了安装Node.js就是为了安装Hexo,现在就开始安装.找打你想要安装的位置,然后右键 –&gt; Git Bash Here –&gt; $　npm install -g hexo-cli 这样它就会完成hexo的安装</p>
<p>3.找到你想要存放博客的位置,开始一些初始化的操作.找到位置,右键 –&gt; Git Bash Here(相当于打开Git命令行) –&gt; $ hexo init blog(blog 是个文件夹名字可以替换成自己喜欢的名字) –&gt; $ cd blog –&gt; $ npm install 此时查看你的blog文件夹里面应该已经有了一些东西,其中:</p>
<pre><code>_config.yml 文件是网站的配置文件，可以在其中配置网站的大部分参数。
package.json 文件是应用程序的信息。
source 是资源文件夹，是用来存放用户资源的地方。
themes 是主题文件夹，Hexo会根据主题来生成不同的静态页面。
scaffolds是模板件夹，当新建文章的时候，Hexo会根据模板来建立文件。
</code></pre><p>4.设置主题,这个是自己可以随意切换的,假如你使用Next主题介绍下怎么使用.</p>
<p> (1).到你安装Hexo的目录打开Git命令行,然后Clone你要使用的Next主题 $　git clone <a href="https://github.com/iissnan/hexo-theme-next.git" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next.git</a> themes/next </p>
<p> (2).然后去<strong>站点配置文件</strong>下面使用你下载的Next主题.打开_config.yml –&gt; 找到theme:         next 修改为你要使用的next主题(修改配置文件属性和属性值之间要有<strong>空格</strong>)</p>
<pre><code> 注意,配置文件在你的存放博客的位置,并且有两份,一个是在主目录外面的_config.yml(我们
暂且把它叫做站点配置文件吧),另一个在你下载的主题里面(我们给它起名字叫做主题配置文件)
</code></pre><p> (3).到你的blog目录,打开Git命令行 –&gt; $　hexo generate(生成静态页面,必须得是这样的页面!!!) –&gt; $　hexo server(打开本地服务,不要关掉窗口,关掉窗口就关闭掉本地服务了),在浏览器里面(输入的网址:<a href="http://你的ip地址:4000)就可以本地访问到你的博客页面了" target="_blank" rel="external">http://你的ip地址:4000)就可以本地访问到你的博客页面了</a></p>
<p>5.现在有点小兴奋呢,但是仔细一想别人还是没法看咱们的博客呐,because现在是本地服务.现在就得依靠全球最大的同性交友网站GitHub了,我们就是把我们的博客托管到GitHub的.</p>
<pre><code>(1).首先你需要注册GitHub,网上的教程很多,自己去看看.

(2).现在你注册好自己的GitHub账号,并且早就安装好了Git,现在是时候把它俩连接起来了(它俩
    不是一回事,我之前也是不明白,不明白的自己上网搜下!!!).就是配置SSH. 
</code></pre><p><a href="https://segmentfault.com/a/1190000002645623" target="_blank" rel="external">配置SSH的教程</a></p>
<p>6.现在就开始部署到GitHub Pages<br>    (1).更改下站点配置文件,把<strong>自己的</strong>GitHub仓库地址写在里面</p>
<pre>        
    deploy:
              type: git
              repo: ssh://git@github.com/gysonghard/gysonghard.github.io.git
              branch: master
</pre>

<p>   (2).Git地址建议使用SSH地址。在上面的参数设置好了之后，使用下面的命令安装 ＄　hexo-deployer-git 插件，只有安装了插件之后才可以部署到Github Pages。</p>
<pre><code>$　npm install hexo-deployer-git --save
</code></pre><p>   (3).下面就开始生成静态页面然后部署到服务器.</p>
<pre><code>$ hexo generate # 生成静态页面
$　hexo deploy # 部署到GitHub
</code></pre><p>   (4).现在在浏览器里面应该就可以访问到你自己的炫酷的博客了!!!</p>
<p>   7.一些注意点:</p>
<pre><code>(1).想要本地访问的话要一直开着本地服务,就是hexo server 那个窗口不能关掉

(2).托管到GitHub访问的时候可能会有点小延迟,所以有时候修改了立即查看看不到效果,稍等下,一般十几s就差不多了

(3).配置完SSH,一定要测试下是否成功!!!

(4).托管到GitHub的步骤顺序:hexo generate(生成静态页面) --&gt;  $　hexo deploy(部署到GitHub服务器)

(5).hexo命令都有简写,但建议开始还是有能力的话就全写得了有助于你理解每个命令的含义,还能练习下单词.
</code></pre></blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自己当时搭建的时候参照了好几个博客的教程,总会有些不一样的地方.慢慢的才捣鼓好,大家看我的博客也会有不太一样的地方,我不可能把每个步骤每个情况都罗列出来,建议大家有问题多上网找找资料,我一直比较欣赏的一句话:你要相信你肯定不是第一个遇到这个问题的人!</p>
<p>感谢这个开源的年代,感谢网上分享自己的知识的人,真的从大家身上学到了好多,感谢感谢全是感谢!</p>
<p>希望自己能坚持写自己博客，虽然自己也是菜鸟，但起码我们还是在努力的路上，哪怕我们不能做很多，但只要是前进的路上，这就是一个好的开始，不是吗？</p>
<p><img src="http://on3sv9pyx.bkt.clouddn.com/Gakki.jpg" alt="Gakki"></p>
<p>希望我的博客能给你带来一些帮助.</p>
]]></content>
      
        
        <tags>
            
            <tag> 搭建博客教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[帅马]]></title>
      <url>http://yoursite.com/2017/03/05/%E5%B8%85%E9%A9%AC/</url>
      <content type="html"><![CDATA[<h1 id="谨以此文献给小马哥"><a href="#谨以此文献给小马哥" class="headerlink" title="谨以此文献给小马哥"></a>谨以此文献给小马哥</h1><a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=0&id=537896662&auto=1&height=32"></iframe>

<p><img src="http://on3sv9pyx.bkt.clouddn.com/光膀子二逼兄弟.jpg" alt="青葱岁月"></p>
<p>青葱岁月,辣眼睛!</p>
<p><img src="http://on3sv9pyx.bkt.clouddn.com/一中飞机与马哥合影.jpg" alt=""></p>
<p>谁还没年轻过?庆幸当初陪我二逼的哥们还在!</p>
<pre><code>该从何说起呢,认识了好多年,如果从知道对方就开始的话应该得十年开外了吧.仿佛冥冥之中自有注定.

兜兜转转,现在居然成了最要好的好基友,真的好感谢.

现在大家都不在一个地方了,虽然这样,有了什么事情还是会想到你,会第一时间和你分享喜怒哀乐.

真的要写些话来感谢才发现好词穷,算了,没那么多矫情.就这样吧!

还记得马哥的话:衣不如新,人不如故.好有道理

希望我们都能好好的,永远年轻,永远热泪盈眶,永远相信好的会战胜不好的!

还记得我们的捷安特和佳能,还有我们的西藏之旅,一切都记得!

再不疯狂就老了,没什么比趁着年轻去认真犯错更酷的事了,什么都别怕,大胆去做去尝试.

因为你怕也没用,索性就大胆去尝试,大不了就错到底,反正还年轻.

这些话与君共勉,come on man!
</code></pre><p><img src="http://on3sv9pyx.bkt.clouddn.com/济南趵突泉.jpg" alt="济南趵突泉"></p>
<blockquote>
<p>愿你有好运气,如果没有,愿你在不幸中学会慈悲.<br></p>
<p>愿你被很多人爱,如果没有,愿你在寂寞中学会包容.</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 好基友,一辈子 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
